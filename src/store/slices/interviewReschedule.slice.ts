import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RescheduleInterviewApiResponse } from '../../models/types/interviewReschedule'; // Import the API response type

interface InterviewRescheduleState {
  loading: boolean;        // Indicates if a reschedule operation is in progress
  error: string | null;    // Stores any error messages
  success: boolean;        // Indicates if the last reschedule operation was successful
}

const initialState: InterviewRescheduleState = {
  loading: false,
  error: null,
  success: false,
};

const interviewRescheduleSlice = createSlice({
  name: 'interviewReschedule', // Unique name for the slice
  initialState, // The initial state defined above
  reducers: {
    rescheduleInterviewStart: (state) => {
      state.loading = true;
      state.error = null;
      state.success = false;
    },
    rescheduleInterviewSuccess: (
      state,
      action: PayloadAction<RescheduleInterviewApiResponse>
    ) => {
      state.loading = false;
      state.success = true;
    },
    rescheduleInterviewFailure: (state, action: PayloadAction<string>) => {
      state.loading = false;
      state.error = action.payload;
      state.success = false;
    },
    clearInterviewRescheduleState: (state) => {
      state.loading = false;
      state.error = null;
      state.success = false;
    },
  },
});

// Export the actions generated by createSlice
export const {
  rescheduleInterviewStart,
  rescheduleInterviewSuccess,
  rescheduleInterviewFailure,
  clearInterviewRescheduleState,
} = interviewRescheduleSlice.actions;

// Export the reducer to be combined in the store
export default interviewRescheduleSlice.reducer;
